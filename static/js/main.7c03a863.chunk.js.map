{"version":3,"sources":["img/appbar.jpg","config/theme.ts","config/api.ts","components/AppLayout.tsx","config/routes.ts","components/Transaction.tsx","components/Transactions.tsx","components/ExpensesView.tsx","App.tsx","services/apolloClient.ts","services/auth.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","primaryColor","indigo","secondaryColor","blue","accentColor","red","A700","primaryHoverColor","darken","secondaryHoverColor","accentHoverColor","contrastLightColor","infoColor","grey","errorColor","successColor","lightBlue","warningColor","deepOrange","fontFamilyBody","theme","createMuiTheme","overrides","palette","primary","contrastText","dark","main","secondary","error","tonalOffset","type","typography","fontFamily","button","appTheme","Object","objectSpread","app","appPaper","padding","margin","backgroundColor","appBar","height","background","backgroundImage","concat","appBarBg","backgroundSize","color","toolBar","toolBarLink","textDecoration","size","scrollbar","accent","accentHover","contrast","contrastLight","info","success","warning","primaryHover","secondaryHover","text","bodyFamily","console","debug","process","defaultApiUrl","API_URL","graphcoolApiUrl","API_URL_GC","defaultFileUrl","FILE_URL","graphcoolFileUrl","FILE_URL_GC","defaultWsUrl","WS_URL","graphcoolWsUrl","WS_URL_GC","useGraphcoolUrl","window","location","search","replace","split","includes","apiUrl","fileUrl","wsUrl","TEST_API_RUNNING","useStyles","makeStyles","_ref","_ref$app","memo","props","classes","react_default","a","createElement","Paper","elevation","className","AppBar","position","Toolbar","Typography","react_router_dom","to","children","note","value","divider","onRemove","ListItem","ListItemText","ListItemSecondaryAction","IconButton","aria-label","onClick","DeleteOutlined_default","transactions","length","style","List","overflow","map","transaction","i","Transaction","assign","key","id","Transactions","App","MuiThemeProvider","AppLayout","data-api-url","data-file-url","data-ws-url","react_router","path","component","ExpensesView","exact","httpLink","createHttpLink","uri","transportLink","wsLink","WebSocketLink","options","reconnect","_ref3","query","definition","getMainDefinition","kind","operation","link","setContext","_","_ref4","headers","token","localStorage","getItem","authorization","onError","graphQLErrors","networkError","statusCode","message","result","JSON","stringify","_ref2","join","operationName","variables","getErrorMessage","client","ApolloClient","cache","InMemoryCache","Boolean","hostname","match","ReactDOM","render","react_common_esm","apolloClient","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c03a863.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/appbar.1b3151e5.jpg\";","import { createMuiTheme } from '@material-ui/core/styles'\nimport { darken } from '@material-ui/core/styles/colorManipulator'\nimport { blue, lightBlue, red, indigo, deepOrange, grey } from '@material-ui/core/colors'\n\nimport appBarBg from '../img/appbar.jpg'\n\nconst backgroundColor = '#fafafa'\n\nconst primaryColor = indigo[900]\nconst secondaryColor = blue[900]\nconst accentColor = red.A700\nconst contrastColor = '#fff'\n\nconst primaryHoverColor = darken(primaryColor, 0.15)\nconst secondaryHoverColor = darken(secondaryColor, 0.15)\nconst accentHoverColor = darken(accentColor, 0.15)\nconst contrastLightColor = darken(contrastColor, 0.15)\n\nconst infoColor = grey[500]\nconst errorColor = red.A700\nconst successColor = lightBlue.A700\nconst warningColor = deepOrange.A700\n\nconst fontFamilyHeadline = 'Georgia, Arial'\nconst fontFamilyBody = 'Arial, \"Helvetica Neue\", Helvetica, sans-serif'\n\nconst appBarHeight = 64\nconst contentPadding = 16\n\nconst theme = createMuiTheme({\n  overrides: {},\n  palette: {\n    primary: {\n      contrastText: contrastColor,\n      dark: primaryColor,\n      main: primaryColor,\n    },\n    secondary: {\n      contrastText: contrastColor,\n      dark: secondaryColor,\n      main: secondaryColor,\n    },\n    error: {\n      contrastText: contrastColor,\n      main: errorColor,\n    },\n\n    tonalOffset: 0.2,\n\n    type: 'light',\n  },\n})\n\ntheme.typography.fontFamily = fontFamilyBody\ntheme.typography.button.fontFamily = fontFamilyHeadline\n\nconst appTheme = {\n  ...theme,\n  app: {\n    appPaper: {\n      padding: 0,\n      margin: 0,\n      backgroundColor,\n    },\n    appBar: {\n      height: appBarHeight,\n      background: primaryColor,\n      backgroundImage: `radial-gradient(circle at top right, ${secondaryColor}, ${primaryColor}), url(${appBarBg})`,\n      backgroundSize: 'cover',\n      color: contrastColor,\n    },\n    toolBar: {\n      height: appBarHeight,\n    },\n    toolBarLink: {\n      color: contrastColor,\n      textDecoration: 'none',\n    },\n    padding: {\n      size: contentPadding,\n      scrollbar: contentPadding,\n    },\n    palette: {\n      background: backgroundColor,\n      accent: accentColor,\n      accentHover: accentHoverColor,\n      contrast: contrastColor,\n      contrastLight: contrastLightColor,\n      info: infoColor,\n      error: errorColor,\n      success: successColor,\n      warning: warningColor,\n      primary: primaryColor,\n      primaryHover: primaryHoverColor,\n      secondary: secondaryColor,\n      secondaryHover: secondaryHoverColor,\n    },\n    text: {\n      bodyFamily: fontFamilyBody,\n    },\n  },\n} as IAppTheme\n\nconsole.debug('mui.theme', appTheme)\n\nexport default appTheme\n","const {\n  API_URL: defaultApiUrl,\n  API_URL_GC: graphcoolApiUrl,\n  FILE_URL: defaultFileUrl,\n  FILE_URL_GC: graphcoolFileUrl,\n  WS_URL: defaultWsUrl,\n  WS_URL_GC: graphcoolWsUrl,\n} = process.env\n\nconst useGraphcoolUrl =\n  window.location.search &&\n  window.location.search\n    .replace(/^\\?/, '')\n    .split('&')\n    .includes('gc')\n\nexport const apiUrl = (useGraphcoolUrl && graphcoolApiUrl) || defaultApiUrl\nexport const fileUrl = (useGraphcoolUrl && graphcoolFileUrl) || defaultFileUrl\nexport const wsUrl = (useGraphcoolUrl && graphcoolWsUrl) || defaultWsUrl\n\nif (!process.env.TEST_API_RUNNING) {\n  console.debug('api.url', apiUrl, { fileUrl, wsUrl, useGraphcoolUrl })\n}\n\nexport default {\n  apiUrl,\n  fileUrl,\n  wsUrl,\n}\n","import React, { memo } from 'react'\nimport { AppBar, Toolbar, Typography, Paper } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\nimport { Link } from 'react-router-dom'\n\nimport { expensesRoute } from '../config/routes'\n\nconst useStyles = makeStyles(({ app: { appPaper, appBar, toolBar, toolBarLink } }: IAppTheme) => ({\n  appPaper,\n  appBar,\n  toolBar,\n  toolBarLink,\n}))\n\nexport default memo(props => {\n  const classes = useStyles()\n\n  return (\n    <Paper elevation={0} className={classes.appPaper}>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar className={classes.toolBar}>\n          <Typography color=\"inherit\">\n            <h1>\n              <Link to={expensesRoute()} className={classes.toolBarLink}>\n                Expenses\n              </Link>\n            </h1>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      {props.children}\n    </Paper>\n  )\n})\n","export const expensesRoute = () => '/'\n\nexport default {\n  expensesRoute,\n}\n","import React, { memo } from 'react'\nimport { ListItem, IconButton, ListItemText, ListItemSecondaryAction } from '@material-ui/core'\nimport DeleteOutlined from '@material-ui/icons/DeleteOutlined'\n\nexport type TransactionProps = ITransaction & {\n  divider: boolean\n  onRemove: any\n}\n\nexport default memo(({ note, value, divider, onRemove }: TransactionProps) => (\n  <ListItem divider={divider}>\n    <ListItemText primary={note} />\n    <ListItemText primary={value} />\n    <ListItemSecondaryAction>\n      <IconButton aria-label=\"Delete Transaction\" onClick={onRemove}>\n        <DeleteOutlined />\n      </IconButton>\n    </ListItemSecondaryAction>\n  </ListItem>\n))\n","import React, { memo } from 'react'\nimport { List, Paper } from '@material-ui/core'\n\nimport Transaction from './Transaction'\n\nexport type TransactionsProps = {\n  transactions: ITransaction[]\n  onRemove: any\n}\n\nexport default memo(({ transactions, onRemove }: TransactionsProps) => {\n  return transactions && transactions.length ? (\n    <Paper style={{ margin: 16 }}>\n      <List style={{ overflow: 'scroll' }}>\n        {transactions.map((transaction: ITransaction, i: number) => (\n          <Transaction\n            {...transaction}\n            key={`transaction-${transaction.id}`}\n            divider={i < transactions.length - 1}\n            onRemove={() => onRemove(i)}\n          />\n        ))}\n      </List>\n    </Paper>\n  ) : null\n})\n","import React, { memo } from 'react'\n\nimport Transactions from './Transactions'\n\nexport default memo(props => <Transactions transactions={[]} onRemove={() => {}} />)\n","import React from 'react'\n\nimport { MuiThemeProvider } from '@material-ui/core/styles'\nimport { Redirect, Route, Switch } from 'react-router-dom'\n\nimport theme from './config/theme'\nimport { apiUrl, fileUrl, wsUrl } from './config/api'\nimport { expensesRoute } from './config/routes'\n\nimport AppHeader from './components/AppLayout'\nimport ExpensesView from './components/ExpensesView'\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <AppHeader />\n    <main data-api-url={apiUrl} data-file-url={fileUrl} data-ws-url={wsUrl}>\n      <Switch>\n        <Route path={expensesRoute()} component={ExpensesView} exact={true} />\n\n        <Redirect to={expensesRoute()} />\n      </Switch>\n    </main>\n  </MuiThemeProvider>\n)\n\nexport default App\n","import ApolloClient from 'apollo-client'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nimport { split } from 'apollo-link'\nimport { onError } from 'apollo-link-error'\nimport { setContext } from 'apollo-link-context'\nimport { getMainDefinition } from 'apollo-utilities'\n\nimport { apiUrl, wsUrl } from '../config/api'\nimport { getToken } from './auth'\n\ndeclare interface IApolloError {\n  message?: string\n  graphQLErrors?: IApolloGraphQLError[]\n  networkError?: IApolloNetworkError\n  operation?: IApolloOperation\n}\n\ndeclare interface IApolloGraphQLError {\n  locations: Array<{\n    column: number\n    line: number\n  }>\n  message: string\n}\n\ndeclare interface IApolloNetworkError {\n  message: string\n  statusCode: number\n  result: {\n    errors: IApolloGraphQLError[]\n  }\n  response: IAnyObject\n}\n\ndeclare interface IApolloOperation {\n  operationName: string\n  variables: IAnyObject\n  query: any\n  extensions: any\n}\n\n// FIXME(upstream): Use ErrorResponse type when fixed: https://github.com/apollographql/apollo-link/issues/536.\nexport const getErrorMessage = ({ graphQLErrors, networkError, operation }: IApolloError) =>\n  `API Error${\n    networkError\n      ? `: ${networkError.statusCode ? `[${networkError.statusCode}] ` : ''}${networkError.message.replace(/\\.$/, '')}${\n          networkError.result ? `: ${JSON.stringify(networkError.result)}` : ''\n        }`\n      : ''\n  }${graphQLErrors && graphQLErrors.length ? `: ${graphQLErrors.map(({ message }) => message).join(': ')}` : ''}${\n    operation ? ` @ ${operation.operationName}` : ''\n  }${operation && operation.variables ? `(${JSON.stringify(operation.variables)})` : ''}`\n\n// Create transport link\nconst httpLink = createHttpLink({ uri: apiUrl })\nlet transportLink = httpLink\n\n// Add optional websocket link split for subscriptions\nif (wsUrl) {\n  const wsLink = new WebSocketLink({\n    uri: wsUrl,\n    options: {\n      reconnect: true,\n    },\n  })\n\n  transportLink = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query)\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription'\n    },\n    wsLink,\n    httpLink,\n  )\n}\n\n// Create authorization link\nconst authLink = setContext((_, { headers }) => {\n  const token = getToken()\n  return token\n    ? {\n        headers: {\n          ...headers,\n          authorization: `bearer ${token}`,\n        },\n      }\n    : {}\n})\n\n// Combine authorization and transport links\nlet link = authLink.concat(transportLink)\n\n// Add optional logging\nif (!process.env.TEST_API_RUNNING) {\n  const logLink = onError(error => console.error(getErrorMessage(error as any), error))\n\n  link = logLink.concat(link)\n}\n\n// Setup client\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n})\n\nexport default client\n","export const getUserId = (def = null) => {\n  const userId = localStorage.getItem('uid')\n  return userId ? userId : def\n}\n\nexport const setUserId = (userId: string) => localStorage.setItem('uid', userId)\n\nexport const getToken = () => localStorage.getItem('token')\n\nexport const setToken = (token: string) => localStorage.setItem('token', token)\n\nexport const clear = () => {\n  localStorage.removeItem('token')\n  localStorage.removeItem('uid')\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport App from './App'\nimport apolloClient from './services/apolloClient'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <ApolloProvider client={apolloClient}>\n    <Router>\n      <App />\n    </Router>\n  </ApolloProvider>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}